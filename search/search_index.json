{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Viper is a hybrid integrated circuit design environment . It supports design workflows with both open-source and proprietary software tools. It also natively supports software and generator based circuit design flows in addition to traditional flows. It supports both open source tools and Cadence Virtuoso with the Virtue package. It is also easily extended to add new tools or integrate with other tools. It manages projects and their shell environment. CLI Commands viper open <project_name> - Open a project in a shell viper config - Read the viper environment configuration viper project create <project_name> - Create a new Viper project viper project info <project_name> - Display a summary of the project viper welcome - Display a welcome message with the version and documentation URL viper --help - Print a help message viper --docs - Print the URL to the documentation See the CLI reference for more details Viper Design Environment EDA environments can be difficult and messy to setup. Viper simplifies this process with declaritive toml configuration files. It also makes tool selection and initialization pythonic by turning them into Python Conda packages and installing them into virtual design environments. Viper-forge Viper-forge is an initiative to develop conda recipes to package EDA tools into conda packages hosted on conda-forge . Contributing All development planning happens in GitHub issues and GitHub discussions . If you see an issue of interest, first check to see if there is an existing branch named after its issue number. Then feel free to comment on the issue and hopefully submit a pull request with your update. For more general questions or if you're looking for guidance on getting started, post in GitHub discussions .","title":"Viper"},{"location":"#overview","text":"Viper is a hybrid integrated circuit design environment . It supports design workflows with both open-source and proprietary software tools. It also natively supports software and generator based circuit design flows in addition to traditional flows. It supports both open source tools and Cadence Virtuoso with the Virtue package. It is also easily extended to add new tools or integrate with other tools. It manages projects and their shell environment.","title":"Overview"},{"location":"#cli-commands","text":"viper open <project_name> - Open a project in a shell viper config - Read the viper environment configuration viper project create <project_name> - Create a new Viper project viper project info <project_name> - Display a summary of the project viper welcome - Display a welcome message with the version and documentation URL viper --help - Print a help message viper --docs - Print the URL to the documentation See the CLI reference for more details","title":"CLI Commands"},{"location":"#viper-design-environment","text":"EDA environments can be difficult and messy to setup. Viper simplifies this process with declaritive toml configuration files. It also makes tool selection and initialization pythonic by turning them into Python Conda packages and installing them into virtual design environments.","title":"Viper Design Environment"},{"location":"#viper-forge","text":"Viper-forge is an initiative to develop conda recipes to package EDA tools into conda packages hosted on conda-forge .","title":"Viper-forge"},{"location":"#contributing","text":"All development planning happens in GitHub issues and GitHub discussions . If you see an issue of interest, first check to see if there is an existing branch named after its issue number. Then feel free to comment on the issue and hopefully submit a pull request with your update. For more general questions or if you're looking for guidance on getting started, post in GitHub discussions .","title":"Contributing"},{"location":"configuration/","text":"Configuration The viper environment configuration is declared as a part of a project's \"pyproject.toml\" or in a \"viper.toml\" file. This configuration can then be accessed from the command line using the viper config command . viper config will display the full configuration and providing the key(s) to be read will select a subset of it. See the configuration reference for more details on the keys in the configuration. Example Config File [tool.viper] default_project_root = \"/prj\"","title":"Configuration"},{"location":"configuration/#configuration","text":"The viper environment configuration is declared as a part of a project's \"pyproject.toml\" or in a \"viper.toml\" file. This configuration can then be accessed from the command line using the viper config command . viper config will display the full configuration and providing the key(s) to be read will select a subset of it. See the configuration reference for more details on the keys in the configuration.","title":"Configuration"},{"location":"configuration/#example-config-file","text":"[tool.viper] default_project_root = \"/prj\"","title":"Example Config File"},{"location":"projects/","text":"Projects Viper projects organize the development of a related set of circuits, most commonly for a specific chip tape-out or a set of standard IP. They allow the configuration of a project work area to be declared in a project.toml configuration file. Then some of this configuration is made available as environment variables. Advantage: multi-process: Each project can support multiple libraries with each library defining its own process declarative configuration: the project configuration is defined in a pyproject.toml or viper.toml file located in the root folder of the project repo. Directory Structure Each project is created in a folder named after the project in the project root directory. This is set using the \"default_project_root\" setting and defaults to the parent directory of the project. Example Directory tree An example directory structure for a \"bandgaps\" project: bandgaps \u251c\u2500\u2500 bandgap_sky130_01 # A library in the Skywater sky130 process \u2502 \u251c\u2500\u2500 controller \u2502 \u2502 \u251c\u2500\u2500 **/*.css \u2502 \u251c\u2500\u2500 views \u2502 \u251c\u2500\u2500 model \u2502 \u251c\u2500\u2500 index.js \u251c\u2500\u2500 bandgap_mcu180_01 # A library in the GF MCU180 process \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u251c\u2500\u2500 **/*.css \u2502 \u251c\u2500\u2500 images \u2502 \u251c\u2500\u2500 js \u2502 \u251c\u2500\u2500 index.html \u251c\u2500\u2500 pyproject.toml \u2514\u2500\u2500 .gitignore Project Configuration The project's configuration is defined in a \"pyproject.toml\" or \"viper.toml\" in the root directory of the repo. Example Config File This example is for the same bandgap project. name = \"bandgaps\" version = \"0.1.0\" authors = [ {name=\"Curtis Mayberry\", email=\"Curtisma3@gmail.com\"}, {name=\"Yulin Deng\", email=\"\"}, {name=\"Thomas Pluck\", email=\"\"}, ] readme = \"README.md\" license = {file=\"LICENSE\"} description = \"A bandgap circuit in the Skywater SKY130 process\" keywords = [\"hardware\", \"analog\"] requires-python = \">=3.8\" classifiers = [ \"Topic :: System :: Hardware\", \"Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)\", \"License :: OSI Approved :: Apache Software License\", \"Operating System :: POSIX :: Linux\", \"Programming Language :: Python :: 3 :: Only\", \"Programming Language :: Python :: 3.8\", \"Programming Language :: Python :: 3.9\", \"Programming Language :: Python :: 3.10\", ] [project.urls] \"Home\" = \"https://github.com/cascode-labs/bandgapReferenceCircuit\" \"Documentation\" = \"https://github.com/cascode-labs/bandgapReferenceCircuit\" \"Source\" = \"https://github.com/cascode-labs/bandgapReferenceCircuit\" [tool.viper.process] foundry = \"Skywater\" process = \"SKY130\"","title":"Projects"},{"location":"projects/#projects","text":"Viper projects organize the development of a related set of circuits, most commonly for a specific chip tape-out or a set of standard IP. They allow the configuration of a project work area to be declared in a project.toml configuration file. Then some of this configuration is made available as environment variables. Advantage: multi-process: Each project can support multiple libraries with each library defining its own process declarative configuration: the project configuration is defined in a pyproject.toml or viper.toml file located in the root folder of the project repo.","title":"Projects"},{"location":"projects/#directory-structure","text":"Each project is created in a folder named after the project in the project root directory. This is set using the \"default_project_root\" setting and defaults to the parent directory of the project.","title":"Directory Structure"},{"location":"projects/#example-directory-tree","text":"An example directory structure for a \"bandgaps\" project: bandgaps \u251c\u2500\u2500 bandgap_sky130_01 # A library in the Skywater sky130 process \u2502 \u251c\u2500\u2500 controller \u2502 \u2502 \u251c\u2500\u2500 **/*.css \u2502 \u251c\u2500\u2500 views \u2502 \u251c\u2500\u2500 model \u2502 \u251c\u2500\u2500 index.js \u251c\u2500\u2500 bandgap_mcu180_01 # A library in the GF MCU180 process \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u251c\u2500\u2500 **/*.css \u2502 \u251c\u2500\u2500 images \u2502 \u251c\u2500\u2500 js \u2502 \u251c\u2500\u2500 index.html \u251c\u2500\u2500 pyproject.toml \u2514\u2500\u2500 .gitignore","title":"Example Directory tree"},{"location":"projects/#project-configuration","text":"The project's configuration is defined in a \"pyproject.toml\" or \"viper.toml\" in the root directory of the repo.","title":"Project Configuration"},{"location":"projects/#example-config-file","text":"This example is for the same bandgap project. name = \"bandgaps\" version = \"0.1.0\" authors = [ {name=\"Curtis Mayberry\", email=\"Curtisma3@gmail.com\"}, {name=\"Yulin Deng\", email=\"\"}, {name=\"Thomas Pluck\", email=\"\"}, ] readme = \"README.md\" license = {file=\"LICENSE\"} description = \"A bandgap circuit in the Skywater SKY130 process\" keywords = [\"hardware\", \"analog\"] requires-python = \">=3.8\" classifiers = [ \"Topic :: System :: Hardware\", \"Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)\", \"License :: OSI Approved :: Apache Software License\", \"Operating System :: POSIX :: Linux\", \"Programming Language :: Python :: 3 :: Only\", \"Programming Language :: Python :: 3.8\", \"Programming Language :: Python :: 3.9\", \"Programming Language :: Python :: 3.10\", ] [project.urls] \"Home\" = \"https://github.com/cascode-labs/bandgapReferenceCircuit\" \"Documentation\" = \"https://github.com/cascode-labs/bandgapReferenceCircuit\" \"Source\" = \"https://github.com/cascode-labs/bandgapReferenceCircuit\" [tool.viper.process] foundry = \"Skywater\" process = \"SKY130\"","title":"Example Config File"},{"location":"reference/cli_reference/","text":"Command Line Interface (CLI) See the overview of viper's commands for an introduction. viper Viper open circuit design environment Documentation: https://www.cascode-labs.org/viper/ Usage: viper [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default -v , --version boolean Show the version and exit. False --docs boolean show the documentation URL and exit False --help boolean Show this message and exit. False config Read the Viper environment configuration Usage: viper config [OPTIONS] [PARAMETERS]... Options: Name Type Description Default -t , --toml boolean Print the result in TOML format False --sources boolean show the documentation URL and exit False --help boolean Show this message and exit. False open Opens a Viper circuit design project Usage: viper open [OPTIONS] PROJECT Options: Name Type Description Default --dev , -d / --nodev , -o boolean A flag for toggling the development mode False --name , -n text Conda name to activate. prefix and name are mutually exclusive options. None --prefix , -p text Conda Prefix to activate. prefix and name are mutually exclusive options. None --shell , -s choice ( tcsh | bash ) The type of shell script specified with the --init or -i options bash --init , -i text Paths to one or more shell initialization scripts which will be sourced, each delimited by a \":\", this option can also be specified multiple times to add additional scripts. None --help boolean Show this message and exit. False project Interact with a project Usage: viper project [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False create Usage: viper project create [OPTIONS] NAME Options: Name Type Description Default --help boolean Show this message and exit. False info Display the project's configuration Usage: viper project info [OPTIONS] [NAME] Options: Name Type Description Default --help boolean Show this message and exit. False welcome Display the Viper welcome message Usage: viper welcome [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"CLI"},{"location":"reference/cli_reference/#command-line-interface-cli","text":"See the overview of viper's commands for an introduction.","title":"Command Line Interface (CLI)"},{"location":"reference/cli_reference/#viper","text":"Viper open circuit design environment Documentation: https://www.cascode-labs.org/viper/ Usage: viper [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default -v , --version boolean Show the version and exit. False --docs boolean show the documentation URL and exit False --help boolean Show this message and exit. False","title":"viper"},{"location":"reference/cli_reference/#config","text":"Read the Viper environment configuration Usage: viper config [OPTIONS] [PARAMETERS]... Options: Name Type Description Default -t , --toml boolean Print the result in TOML format False --sources boolean show the documentation URL and exit False --help boolean Show this message and exit. False","title":"config"},{"location":"reference/cli_reference/#open","text":"Opens a Viper circuit design project Usage: viper open [OPTIONS] PROJECT Options: Name Type Description Default --dev , -d / --nodev , -o boolean A flag for toggling the development mode False --name , -n text Conda name to activate. prefix and name are mutually exclusive options. None --prefix , -p text Conda Prefix to activate. prefix and name are mutually exclusive options. None --shell , -s choice ( tcsh | bash ) The type of shell script specified with the --init or -i options bash --init , -i text Paths to one or more shell initialization scripts which will be sourced, each delimited by a \":\", this option can also be specified multiple times to add additional scripts. None --help boolean Show this message and exit. False","title":"open"},{"location":"reference/cli_reference/#project","text":"Interact with a project Usage: viper project [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False","title":"project"},{"location":"reference/cli_reference/#create","text":"Usage: viper project create [OPTIONS] NAME Options: Name Type Description Default --help boolean Show this message and exit. False","title":"create"},{"location":"reference/cli_reference/#info","text":"Display the project's configuration Usage: viper project info [OPTIONS] [NAME] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"info"},{"location":"reference/cli_reference/#welcome","text":"Display the Viper welcome message Usage: viper welcome [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"welcome"},{"location":"reference/viper_configuration/","text":"Configuration Reference The top-level Viper configuration file schema. See the configuration overview for more details. ViperConfig key type required description default VIPER_CONFIG_PATH FilePath True Path to the viper config file conda Optional[Conda] False Conda environment configuration default_project_root Optional[DirectoryPath] False Default directory to place new projects docs Mapping[str, str] False URLs to documentation sites {'viper': 'https://www.cascode-labs.org/viper/', 'viper-forge': 'https://www.cascode-labs.org/viper-forge/'} simulation_dirpath Path False Path to the directory for storing all simulation results /tmp/simulation Conda key type required description default prefixes Mapping[str, Path] True channels Optional[Mapping[str, Union[pathlib.Path, pydantic.networks.AnyHttpUrl, str]]] False","title":"Configuration"},{"location":"reference/viper_configuration/#configuration-reference","text":"The top-level Viper configuration file schema. See the configuration overview for more details. ViperConfig key type required description default VIPER_CONFIG_PATH FilePath True Path to the viper config file conda Optional[Conda] False Conda environment configuration default_project_root Optional[DirectoryPath] False Default directory to place new projects docs Mapping[str, str] False URLs to documentation sites {'viper': 'https://www.cascode-labs.org/viper/', 'viper-forge': 'https://www.cascode-labs.org/viper-forge/'} simulation_dirpath Path False Path to the directory for storing all simulation results /tmp/simulation Conda key type required description default prefixes Mapping[str, Path] True channels Optional[Mapping[str, Union[pathlib.Path, pydantic.networks.AnyHttpUrl, str]]] False","title":"Configuration Reference"}]}